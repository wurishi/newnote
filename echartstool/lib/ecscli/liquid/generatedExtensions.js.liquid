/**
 * Entitas Generated Extensions for {{ namespace }}
 *
 * do not edit this file
 */
 var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var {{ namespace }};
(function (space) {
  'use strict';
  var Pool = entitas.Pool;
  var Entity = entitas.Entity;
  var CoreComponentIds;
  (function (CoreComponentIds) {
    {% for item in componentIds %}CoreComponentIds[CoreComponentIds['{{ item[0] }}'] = {{ item[1] }}] = '{{ item[0] }}';
    {% endfor %}CoreComponentIds[CoreComponentIds['TotalComponents'] = {{ componentNames.length }}] = 'TotalComponents';
  })(CoreComponentIds = space.CoreComponentIds || (space.CoreComponentIds = {}));
  Entity.initialize(CoreComponentIds.TotalComponents, {{ alloc }});
  {% for Name in componentNames %}
  var {{ Name }}Component = /** @class */ (function () {
    function {{ Name }}Component() {}
    return {{ Name }}Component;
  }());
  space.{{ Name }}Component = {{ Name }}Component;
  {% endfor %}
  var Pools = /** @class */ (function (_super) {
    __extends(Pools, _super);
    function Pools() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Pools, 'allPools', {
      get: function () {
        if (Pools._allPools == null) {
          Pools._allPools = [Pools.pool];
        }
        return Pools._allPools;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Pools, 'pool', {
      get: function() {
        if (Pools._pool == null) {
          Pools._pool = new Pool(CoreComponentIds, CoreComponentIds.TotalComponents, false);
          entitas.viewer.VisualDebugging.init(Pools._pool);
        }
        return Pools._pool;
      },
      enumerable: false,
      configurable: true,
    });
    return Pools;
  }(Pool));
  space.Pools = Pools;
})({{ namespace }} || ({{ namespace }} = {}));
(function () {
  'use strict';
  var Bag = entitas.utils.Bag;
  var Pool = entitas.Pool;
  var Entity = entitas.Entity;
  var Matcher = entitas.Matcher;
  var SingleEntityException = entitas.exceptions.SingleEntityException;

  {% for Name in componentNames %}var {{ Name }}Component = {{ namespace }}.{{ Name }}Component;
  {% endfor %}
  var CoreComponentIds = {{ namespace }}.CoreComponentIds;
  {% for c in components.c1 %}
  /** @type {{ '{' }}{{namespace}}.{{ c.Name }}Component} */
  Entity.{{ c.name }}Component = new {{ c.Name }}Component();
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'is{{ c.Name }}', {
    get: function () {
      return this.hasComponent(CoreComponentIds.{{ c.Name }});
    },
    set: function (value) {
      if (value !== this.is{{ c.Name }}) {
        if (value) {
          this.addComponent(CoreComponentIds.{{ c.Name }}, Entity.{{ c.name }}Component);
        } else {
          this.removeComponent(CoreComponentIds.{{ c.Name }});
        }
      }
    }
  });
  /**
   * @param {boolean} value
   * @returns {entitas.Entity}
   */
  Entity.prototype.set{{ c.Name }} = function (value) {
    this.is{{ c.Name }} = value;
    return this;
  };
  {% endfor %}
  {% for c in components.c2 %}
  /** @type {entitas.utils.Bag} */
  Entity._{{ c.name }}ComponentPool = new Bag();
  // Bad Code
  // Entity._{{ c.name }}ComponentPool.__proto__ = Bag.prototype;
  (function () {
    for (var i = 0; i < {{c.count}}; i++) {
      Entity._{{ c.name }}ComponentPool.add(new {{ c.Name }}Component());
    }
  })();
  Entity.clear{{ c.Name }}ComponentPool = function () {
    Entity._{{ c.name }}ComponentPool.clear();
  };
  /** @type {{ '{' }}{{ namespace }}.{{ c.Name }}Component} */
  Object.defineProperty(Entity.prototype, '{{ c.name }}', {
    get: function () {
      return this.getComponent(CoreComponentIds.{{ c.Name }});
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Entity.prototype, 'has{{ c.Name }}', {
    get: function () {
      return this.hasComponent(CoreComponentIds.{{ c.Name }});
    }
  });
  /**
   * add
   {% for p in c.p %}* @param {{ '{' }}{{ p[1] }}} {{ p[0] }}
   {% endfor %}* @returns {entitas.Entity}
   */
  Entity.prototype.add{{ c.Name }} = function ({{ c.params }}) {
    var component = Entity._{{ c.name }}ComponentPool.size() > 0 ? Entity._{{ c.name }}ComponentPool.removeLast() : new {{ c.Name }}Component();
    {% for p in c.p %}component.{{ p[0] }} = {{ p[0] }};
    {% endfor %}this.addComponent(CoreComponentIds.{{ c.Name }}, component);
    return this;
  };
  /**
   * replace
   {% for p in c.p %}* @param {{ '{' }}{{ p[1] }}} {{ p[0] }}
   {% endfor %}* @returns {entitas.Entity}
   */
  Entity.prototype.replace{{ c.Name }} = function ({{ c.params }}) {
    var previousComponent = this.has{{ c.Name }} ? this.{{ c.name }} : null;
    var component = Entity._{{ c.name }}ComponentPool.size() > 0 ? Entity._{{ c.name }}ComponentPool.removeLast() : new {{ c.Name }}Component();
    {% for p in c.p %}component.{{ p[0] }} = {{ p[0] }};
    {% endfor %}this.replaceComponent(CoreComponentIds.{{ c.Name }}, component);
    if (previousComponent != null) {
      Entity._{{ c.name }}ComponentPool.add(previousComponent);
    }
    return this;
  };
  /**
   * remove
   * @returns {entitas.Entity}
   */
  Entity.prototype.remove{{ c.Name }} = function () {
    var component = this.{{ c.name }};
    this.removeComponent(CoreComponentIds.{{ c.Name }});
    Entity._{{ c.name }}ComponentPool.add(component);
    return this;
  };
  {% endfor %}
  {% for c in components.c %}
  /** @type {entitas.Matcher} */
  Matcher._matcher{{c.Name}} = null;
  /** @type {entitas.Matcher} */
  Object.defineProperty(Matcher, '{{c.Name}}', {
    get: function () {
      if (Matcher._matcher{{ c.Name }} == null) {
        Matcher._matcher{{ c.Name }} = Matcher.allOf(CoreComponentIds.{{ c.Name }});
      }
      return Matcher._matcher{{ c.Name }};
    }
  });
  {% endfor %}
  {% for e in entities.e1 %}
  /** @type {entitas.Entity} */
  Object.defineProperty(Pool.prototype, '{{ e.name }}Entity', {
    get: function () {
      return this.getGroup(Matcher.{{ e.Name }}).getSingleEntity();
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Pool.prototype, 'is{{ e.Name }}', {
    get: function () {
      return this.{{ c.name }}Entity != null;
    },
    set: function (value) {
      var entity = this.{{ c.name }}Entity;
      if (value != (entity != null)) {
        if (value) {
          this.createEntity('{{ c.Name }}').is{{ c.Name }} = true;
        } else {
          this.destroyEntity(entity);
        }
      }
    }
  });
  {% endfor %}
  {% for e in entities.e2 %}
  /** @type {entitas.Entity} */
  Object.defineProperty(Pool.prototype, '{{ e.name }}Entity', {
    get: function () {
      return this.getGroup(Matcher.{{ e.Name }}).getSingleEntity();
    }
  });
  /** @type {{ '{' }}{{namespace}}.{{e.Name}}Component} */
  Object.defineProperty(Pool.prototype, '{{ e.name }}', {
    get: function () {
      return this.{{ e.name }}Entity.{{ e.name }};
    }
  });
  /** @type {boolean} */
  Object.defineProperty(Pool.prototype, 'has{{ e.Name }}', {
    get: function () {
      return this.{{ e.name }}Entity != undefined;
    }
  });
  /**
   * set
   {% for p in e.p %}* @param {{ '{' }}{{ p[1] }}} {{ p[0] }}
   {% endfor %}* @returns {entitas.Entity}
   */
  Pool.prototype.set{{ e.Name }} = function ({{ e.params }}) {
    if (this.has{{ e.Name }}) {
      throw new SingleEntityException(Matcher.{{ e.Name }});
    }
    var entity = this.createEntity('{{ e.Name }}');
    entity.add{{ e.Name }}({{ e.params }});
    return entity;
  };

  /**
   * replace
   {% for p in e.p %}* @param {{ '{' }}{{ p[1] }}} {{ p[0] }}
   {% endfor %}* @returns {entitas.Entity}
   */
  Pool.prototype.replace{{ e.Name }} = function ({{ e.params }}) {
    var entity = this.{{ e.name }}Entity;
    if (entity == null) {
      entity = this.set{{ e.Name }}({{ e.params }});
    } else {
      entity.replace{{ e.Name }}({{ e.params }});
    }
    return entity;
  };
  /**
   * @ returns {entitas.Entity}?
   */
  Pool.prototype.remove{{ e.Name }} = function () {
    this.destroyEntity(this.{{ e.name }}Entity);
  };
  {% endfor %}
})();