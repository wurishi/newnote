package {{ namespace }} 
/**
 * Entitas Generated Components and Extensions for {{ namespace }}
 *
 * do not edit this file
 */

import scala.collection.mutable.ListBuffer
import com.darkoverlordofdata.entitas.{Entity, Matcher, IMatcher, IComponent}
{% for type in ext %}import {{ type }}{% endfor %}
/**
 * Components
 */
object Component extends Enumeration {
    type Component = Value
    var
{% for component in components %}    {{ component.key }},
{% endfor %}    TotalComponents = Value
}
{% for component in components %}
{% if component.value == false %}case class {{ component.key }}Component({{ mutable }} active:Boolean=true) extends IComponent {% else %}case class {{ component.key }}Component({% for field in component.value %}{{ mutable }} {{ field }} = {{ field | defaultValue }}{% if forloop.index <  forloop.length %},{% endif %}{% endfor %}) extends IComponent {% endif %}{% endfor %}

/**
 * Matcher extensions
 */
object Match {
{% for component in components %}
    val {{ component.key }}:IMatcher = Matcher.allOf(Array(Component.{{ component.key }}.id)) {% endfor %}
}

/**
 * Entity extensions
 */
object EntityExtensions {
{% for component in components %}
{% if component.value == false %}    private val {{ component.key | camel }}Component =  new {{ component.key }}Component(){% else %}    private val {{ component.key | camel }}ComponentPool = new ListBuffer[{{ component.key }}Component](){% endif %}{% endfor %}

    implicit class ExtendEntity(val entity:Entity) {

{% for component in components %}
        /** Entity: {{ component.key }} methods*/{% if component.value == false %}
        def is{{ component.key }}:Boolean = entity.hasComponent(Component.{{ component.key }}.id)

        def set{{ component.key }}(value:Boolean):Entity = {
            if (value != is{{ component.key }})
                entity.addComponent(Component.{{ component.key }}.id, {{ component.key | camel }}Component)
            else
                entity.removeComponent(Component.{{ component.key }}.id)
            entity
        }
{% else %}
        def {{ component.key | camel }}:{{ component.key }}Component = entity.getComponent(Component.{{ component.key }}.id).asInstanceOf[{{ component.key }}Component]

        def has{{ component.key }}:Boolean = entity.hasComponent(Component.{{ component.key }}.id)

        def clear{{ component.key }}ComponentPool() = {
            {{ component.key | camel }}ComponentPool.clear()
        }

        def add{{ component.key }}({{ component.value | params }}):Entity = {
            val component:{{ component.key }}Component = 
                if ({{ component.key | camel }}ComponentPool.nonEmpty) 
                    {{ component.key | camel }}ComponentPool.last.copy({% for field in component.value %}{{ field | property }} = {{ field | property }}{% if forloop.index <  forloop.length %}, {% endif %}{% endfor %})
                else new {{ component.key }}Component({% for field in component.value %}{{ field | property }} = {{ field | property }}{% if forloop.index <  forloop.length %}, {% endif %}{% endfor %})
            
            entity.addComponent(Component.{{ component.key }}.id, component)
            entity
        }

        def replace{{ component.key }}({{ component.value | params }}):Entity = {
            val previousComponent = if (has{{ component.key }}) {{ component.key | camel }} else null
            val component:{{ component.key }}Component = 
                if ({{ component.key | camel }}ComponentPool.nonEmpty) 
                    {{ component.key | camel }}ComponentPool.last.copy({% for field in component.value %}{{ field | property }} = {{ field | property }}{% if forloop.index <  forloop.length %}, {% endif %}{% endfor %})
                else new {{ component.key }}Component({% for field in component.value %}{{ field | property }} = {{ field | property }}{% if forloop.index <  forloop.length %}, {% endif %}{% endfor %})
            entity.replaceComponent(Component.{{ component.key }}.id, component)
            if (previousComponent != null)
                {{ component.key | camel }}ComponentPool += previousComponent
            entity
        }

        def remove{{ component.key }}():Entity = {
            val component = {{ component.key | camel }}
            entity.removeComponent(Component.{{ component.key }}.id)
            {{ component.key | camel }}ComponentPool += component
            entity
        }
        
        def update{{ component.key }}(component: {{ component.key }}Component) = {
            entity.updateComponent(Component.{{ component.key }}.id, component)
        }{% endif %}{% endfor %}
    }
}