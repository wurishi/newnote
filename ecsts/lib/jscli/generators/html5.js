const fs = require('fs');
const path = require('path');
const mkdirp = require('mkdirp');
const liquid = require('liquid.coffee');
const config = require(`${process.cwd()}/entitas.json`);
const { objectEntries } = require('../utils');

const params = (a, sep = ', ') => {
  const b = [];
  for (const item of a) {
    b.push(item.split(':')[0]);
  }
  return b.join(sep);
};

function run(...flags) {
  let tpl;
  const dbg = config.debug || false;
  console.log('debug = ', dbg);

  const ts = [];
  const js = [];
  let d0 = '';
  const d1 = {
    c1: [],
    c2: [],
  };
  const d2 = [];
  const d3 = [];
  const ex = {}; // or []

  d2.push(`/** Matcher Extensions for ${config.namespace} */`);
  d3.push(`/** Pool Extensions for ${config.namespace} */`);

  // Header
  // js need create Entitas Generated Classes
  ts.push(`
  /**
   * Entitas Generated Classes for ${config.namespace}
   *
   * do not edit this file
   */
  module ${config.namespace} {
    "use strict";

    import Pool = entitas.Pool;
    import Entity = entitas.Entity;
    import Matcher = entitas.Matcher;
    import ISystem = entitas.ISystem;
    import IMatcher = entitas.IMatcher;
    import IComponent = entitas.IComponent;
  `);

  js.push(`
  /**
   * Entitas Generated Extensions for ${config.namespace}
   *
   * do not edit this file
   */
  (function() {
    "use strict";
    var Bag = entitas.utils.Bag;
    var Pool = entitas.Pool;
    var Entity = entitas.Entity;
    var Matcher = entitas.Matcher;
    var SingleEntityException = entitas.SingleEntityException;
  `);
  for (const Name in config.components) {
    js.push(`    var ${Name}Component = ${config.namespace}.${Name}Component;`);
  }
  js.push(`    var CoreComponentIds = ${config.namespace}.CoreComponentIds;`);

  // Components Enum
  ts.push('     export enum CoreComponentIds {');
  for (const Name in config.components) {
    ts.push(`       ${Name},`);
  }
  ts.push(`       TotalComponents
      }

    Entity.initialize(CoreComponentIds.TotalComponents, ${JSON.stringify(
      config.alloc
    )});
  `);

  // Components Class Definitions
  for (const [Name, properties] of objectEntries(config.components)) {
    ts.push(`     export class ${Name}Component implements IComponent {`);
    if (Array.isArray(properties)) {
      for (const p of properties) {
        ts.push(`       public ${p};`);
      }
    }
    ts.push('     }');
  }

  // Components Class Declarations
  tpl = liquid.Template.parse(
    fs.readFileSync(
      path.join(__dirname, '../liquid/interface-d0.liquid'),
      'utf-8'
    )
  );
  const components = [];
  for (const [Name, properties] of objectEntries(config.components)) {
    components.push({
      Name,
      properties: Array.isArray(properties) ? properties : [],
    });
  }
  d0 = tpl.render({ components });

  // Extend Entity with components
  for (const [Name, properties] of objectEntries(config.components)) {
    const name = Name[0].toLowerCase() + Name.substr(1);
    if (!Array.isArray(properties)) {
      js.push(`
      /** @type {${config.namespace}.${Name}Component} */
      Entity.${name}Component = new ${Name}Component();
      /** @type {boolean} */
      Object.defineProperty(Entity.prototype, 'is${Name}', {
        get: function() {
          return this.hasComponent(CoreComponentIds.${Name});
        },
        set: function(value) {
          if(value !== this.is${Name}) {
            if(value) {
              this.addComponent(CoreComponentIds.${Name}, Entity.${name}Component);
            } else {
              this.removeComponent(CoreComponentIds.${Name});
            }
          }
        }
      });
      /**
       * @param {boolean} value
       * @returns {entitas.Entity}
       */
      Entity.prototype.set${Name} = function(value) {
        this.is${Name} = value;
        return this;
      };
      `);
      d1.c1.push({ name, Name });
    } else {
      const alloc = config.alloc || {};
      const { components = 0 } = alloc;
      js.push(`
      /** @type {entitas.utils.Bag} */
      Entity._${name}ComponentPool = new Bag();
      (function() {
        for(var i=0; i<${components};i++) {
          Entity._${name}ComponentPool.add(new ${Name}Component());
        }
      })();
      Entity.clear${Name}ComponentPool = function() {
        Entity._${name}ComponentPool.clear();
      };
      /** @type {${config.namespace}.${Name}Component} */
      Object.defineProperty(Entity.prototype, '${name}', {
        get: function() {
          return this.getComponent(CoreComponentIds.${Name});
        }
      });
      /** @type {boolean} */
      Object.defineProperty(Entity.prototype, 'has${Name}', {
        get: function() {
          return this.hasComponent(CoreComponentIds.${Name});
        }
      });
      `);

      // add 注释
      js.push('     /**');
      for (const p of properties) {
        js.push(`      * @param {${p.split(':')[1]}} ${p.split(':')[0]}`);
      }
      js.push(`
      * @returns {entitas.Entity}
      */
      `);
      // add
      js.push(`     Entity.prototype.add${Name} = function(${params(
        properties
      )}) {
        var component = Entity._${name}ComponentPool.size() > 0 ? Entity._${name}ComponentPool.removeList() : new ${Name}Component();
        `);
      for (const p of properties) {
        js.push(`       component.${p.split(':')[0]} = ${p.split(':')[0]};`);
      }
      js.push(`       this.addComponent(CoreComponentIds.${Name}, component);
      return this;
    }`);
      // replace
      js.push('     /**');
      for (const p of properties) {
        js.push(`     * @param {${p.split(':')[1]}} ${p.split(':')[0]}`);
      }
      js.push(`     * @returns {entitas.Entity}
      */`);

      js.push(`     Entity.prototype.replace${Name} = function(${params(
        properties
      )}) {
        var previousComponent = this.has${Name} ? this.${name} : null;
        var component = Entity._${name}ComponentPool.size() > 0 ? Entity._${name}ComponentPool.removeLast() : new ${Name}Component();
      `);
      for (const p of properties) {
        js.push(`     component.${p.split(':')[0]} = ${p.split(':')[0]};`);
      }
      js.push(`
      this.replaceComponent(CoreComponentIds.${Name}, component);
      if(previousComponent != null) {
        Entity._${name}ComponentPool.add(previousComponent);
      }
      return this;
    };
      `);

      js.push(`
      /**
       * @returns {entitas.Entity}
       */
      Entity.prototype.remove${Name} = function() {
        var component = this.${name};
        this.removeComponent(CoreComponentIds.${Name});
        Entity._${name}ComponentPool.add(component);
        return this;
      };`);

      d1.c2.push({
        name,
        Name,
        p: properties.join(', '),
      });
    }
  }

  // Matchers
  for (const [Name, properties] of objectEntries(config.components)) {
    const name = Name[0].toLowerCase() + Name.substr(1);
    js.push(`
    /** @type {entitas.Matcher} */
    Matcher._matcher${Name} = null;

    /** @type {entitas.Matcher} */
    Object.defineProperty(Matcher, '${Name}', {
      get: function() {
        if(Matcher._matcher${Name} == null) {
          Matcher._matcher${Name} = Matcher.allOf(CoreComponentIds.${Name});
        }
        return Matcher._matcher${Name};
      }
    });
    `);

    d2.push(`
    static _matcher${Name};
    static ${Name}: Matcher;
    `);
  }

  // Pooled Entities
  for (const [Name, pooled] of objectEntries(config.entities)) {
    if (pooled) {
      const name = Name[0].toLowerCase() + Name.substr(1);
      const properties = config.components[Name];
      if (!Array.isArray(properties)) {
        js.push(`
        /** @type {entitas.Matcher} */
        Object.defineProperty(Pool.prototype, '${name}Entity', {
          get: function() {
            return this.getGroup(Matcher.${Name}).getSingleEntity();
          }
        });
        /** @type {boolean} */
        Object.defineProperty(Pool.prototype, 'is${Name}', {
          get: function() {
            return this.${name}Entity != null;
          },
          set: function(value) {
            var entity = this.${name}Entity;
            if(value != (entity != null)) {
              if(value) {
                this.createEntity('${Name}').is${Name} = true;
              } else {
                this.destroyEntity(entity);
              }
            }
          }
        });
        `);

        d3.push(`
        ${name}Entity: Entity;
        is${Name}: boolean;
        `);
      } else {
        js.push(`
        /** @type {entitas.Entity} */
        Object.defineProperty(Pool.prototype, '${name}Entity', {
          get: function() {
            return this.getGroup(Matcher.${Name}).getSingleEntity();
          }
        });
        /** @type {${config.namespace}.${Name}Component} */
        Object.defineProperty(Pool.prototype, '${name}', {
          get: function() {
            return this.${name}Entity.${name};
          }
        });
        /** @type {boolean} */
        Object.defineProperty(Pool.prototype, 'has${Name}', {
          get: function() {
            return this.${name}Entity != undefined;
          }
        });
        `);

        //set
        js.push('     /**');
        for (const p of properties) {
          js.push(`     * @param {${p.split(':')[1]}} ${p.split(':')[0]}`);
        }
        js.push(`
        * @returns {entitas.Entity}
        */`);

        js.push(`
        Pool.prototype.set${Name} = function(${params(properties)}) {
          if(this.has${Name}) {
            throw new SingleEntityException(Matcher.${Name});
          }
          var entity = this.createEntity('${Name}');
          entity.add${Name}(${params(properties)});
          return entity;
        };
        `);

        //replace
        js.push('     /**');
        for (const p of properties) {
          js.push(`     * @param {${p.split(':')[1]}} ${p.split(':')[0]}`);
        }
        js.push(`
        * @ returns {entitas.Entity}
        */`);

        js.push(`
        Pool.prototype.replace${Name} = function(${params(properties)}) {
          var entity = this.${name}Entity;
          if(entity == null) {
            entity = this.set${Name}(${params(properties)});
          } else {
            entity.replace${Name}(${params(properties)});
          }
          return entity;
        };
        /**
         * @ returns {entitas.Entity}
         */
        Pool.prototype.remove${Name} = function() {
          this.destroyEntity(this.${name}Entity);
        };
        `);

        d3.push(`
        ${name}Entity: Entity;
        ${name}: ${Name}Component;
        has${Name}: boolean;
        set${Name}(${properties.join(', ')}): Entity;
        replace${Name}(${properties.join(', ')}): Entity;
        remove${Name}(): void;
        `);
      }
    }
  }

  // Pools
  tpl = liquid.Template.parse(
    fs.readFileSync(path.join(__dirname, '../liquid/pools-ts.liquid'), 'utf-8')
  );
  ts.push(tpl.render({ dbg: JSON.stringify(dbg) }));
  ts.push('}');

  js.push('})();');

  mkdirp(path.dirname(path.join(process.cwd(), config.output.typescript)));
  fs.writeFileSync(
    path.join(process.cwd(), config.output.typescript),
    ts.join('\n')
  );

  mkdirp(path.dirname(path.join(process.cwd(), config.output.javascript)));
  fs.writeFileSync(
    path.join(process.cwd(), config.output.javascript),
    js.join('\n')
  );

  for (const [Name, klass] of objectEntries(config.extensions)) {
    ex[Name] = [];
    ex[Name].push(`/*** Extensions for ${config.namespace}.${Name} */`);
    for (const [method, args] of objectEntries(klass)) {
      const [name, type] = method.split(':');
      ex[Name].push(`     ${name}(${args.join(', ')}):${type};`);
    }
  }
  // const def = (dts, className, dd) => {
  //   let i = dts.indexOf(className);
  //   if (i < 0) {
  //     console.log('未找到: ', className);
  //     return dts;
  //   }
  //   i += className.length;
  //   dts = dts.substr(0, i) + '\n' + dd.join('\n') + dts.substr(i);
  //   return dts;
  // };

  tpl = liquid.Template.parse(
    fs.readFileSync(
      path.join(__dirname, '../liquid/entitas.d.ts.liquid'),
      'utf-8'
    )
  );
  const d1_tpl = liquid.Template.parse(
    fs.readFileSync(path.join(__dirname, '../liquid/entity-d1.liquid'), 'utf8')
  );
  let dts = tpl.render({
    namespace: config.namespace,
    interfaceIComponent: d0,
    classEntity: d1_tpl.render({ namespace: config.namespace, ...d1 }),
    matcher: d2.join('\n'),
    pool: d3.join('\n'),
  });
  //   for (const [Name, d0] of objectEntries(ex)) {
  //     dts = def(dts, `    class #{Name} {`, d0);
  //   }
  dts = `
  /**
   * Entitas-ECS definitions for ${config.namespace}
   */
  ${dts}
    `;

  mkdirp(path.dirname(path.join(process.cwd(), config.output.declaration)));
  fs.writeFileSync(path.join(process.cwd(), config.output.declaration), dts);

  // console.log(ts.join('\n'));
  // console.log(js.join('\n'));
  // console.log(d0.join('\n'));
  // console.log(d1.join('\n'));
}

module.exports.run = run;
