/**
 * Entitas Generated Components and Extensions for {{ namespace }}
 *
 * do not edit this file
 */
[indent=4]
uses Entitas

namespace ShmupWarz

    const POOL_SIZE : int = {{ alloc.components }}

    /**
    * Component extensions
    */
    const components: array of string = {
{% for component in components %}        "{{ component.key }}Component",
{% endfor %}        "ComponentsCount"
    }

    enum Component
{% for component in components %}        {{ component.key }}
{% endfor %}        ComponentsCount


{% for component in components %}
    class {{ component.key }}Component : Object implements IComponent 
{% if component.value == false %}        active : bool = true
{% else %}{% for field in component.value %}        {{ field | property }} : {{ field | fieldType }} 
{% endfor %}{% endif %}{% endfor %}


    /**
    * Entity extensions
    */
    /* Preallocate component pools*/

{% for component in components %}{% if component.value == false %}
    /** @type {{ component.key }} */
    _{{ component.key | camel }}Component : {{ component.key }}Component
{% else %}    /** @type entitas.utils.GLib.Queue<{{ component.key }}> */
    _{{ component.key | camel }}ComponentPool : GLib.Queue of {{ component.key }}Component
{% endif %}{% endfor %}

    def initializePools()
{% for component in components %}{% if component.value == false %}
        _{{ component.key | camel }}Component = new {{ component.key }}Component()
{% else %}        _{{ component.key | camel }}ComponentPool = new GLib.Queue of {{ component.key }}Component
        for var i=1 to POOL_SIZE
            _{{ component.key | camel }}ComponentPool.push_head(new {{ component.key }}Component())
{% endif %}{% endfor %}

{% for component in components %}

    /** Entity: {{ component.key }} methods*/
{% if component.value == false %}
    /**
        * @param entity
        * @return boolean
        */
    def is{{ component.key }}(e: Entity) : bool
        return e.hasComponent(Component.{{ component.key }})

    /**
        * @param entity
        * @param value
        * @return entity
        */
    def set{{ component.key }}(e: Entity, value: bool) : Entity
        if value
            e.addComponent(Component.{{ component.key }}, _{{ component.key | camel }}Component)
        else
            e.removeComponent(Component.{{ component.key }})
        return e
            
{% else %}
    /** @type {{ component.key }} */
    def get{{ component.key }}(e: Entity) : {{ component.key }}Component
        return ({{ component.key }}Component)e.getComponent(Component.{{ component.key }})

    /** @type boolean */
    def has{{ component.key }}(e: Entity) : bool
        return e.hasComponent(Component.{{ component.key }})

    def clear{{ component.key }}ComponentPool()
        _{{ component.key | camel }}ComponentPool.clear()

    /**{% for field in component.value %}
        * @param {{ field | property }} {{ field | fieldType }}{% endfor %}
        * @return entitas.Entity
        */
    def add{{ component.key }}(e: Entity, {{ component.value }}) : Entity
        var c = _{{ component.key | camel }}ComponentPool.length > 0 ? _{{ component.key | camel }}ComponentPool.pop_head() : new {{ component.key }}Component()
        {% for field in component.value %}c.{{ field | property }} = {{ field | property | camel }}
        {% endfor %}e.addComponent(Component.{{ component.key }}, c)
        return e

    /**{% for field in component.value %}
        * @param {{ field | property }} {{ field | fieldType }}{% endfor %}
        * @return entitas.Entity
        */
    def replace{{ component.key }}(e: Entity, {{ component.value }}) : Entity
        var previousComponent = has{{ component.key }}(e) ? get{{ component.key }}(e) : null
        var c = _{{ component.key | camel }}ComponentPool.length > 0 ? _{{ component.key | camel }}ComponentPool.pop_head() : new {{ component.key }}Component()
        {% for field in component.value %}c.{{ field | property }} = {{ field | property | camel }}
        {% endfor %}e.replaceComponent(Component.{{ component.key }}, c) 
        if previousComponent != null
            _{{ component.key | camel }}ComponentPool.push_head(previousComponent)
        return e

    /**
        * @returns entitas.Entity
        */
    def remove{{ component.key }}(e: Entity) : Entity
        var c = get{{ component.key }}(e)
        e.removeComponent(Component.{{ component.key }}) 
        _{{ component.key | camel }}ComponentPool.push_head(c)
        return e

{% endif %}{% endfor %}
